{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "T-mining Secure Container Release API",
    "description": "This API allows carriers, forwarders and transport companies to securely release full import containers on a terminal and to transfer this release to the other parties in the chain, up to the truck driver or the barge/rail operator.",
    "license": {
      "name": "T-Mining license 1.0",
      "url": "http://www.t-mining.be/license"
    },
    "contact": {
      "name": "T-Mining API support",
      "url": "http://support.t-mining.be/",
      "email": "support@t-mining.be"
    }
  },
  "host": "api-sb.nxtport.eu",
  "basePath": "/blockchain",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "apiKeyHeader": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    },
    "apiKeyQuery": {
      "type": "apiKey",
      "name": "subscription-key",
      "in": "query"
    }
  },
  "security": [
    {
      "apiKeyHeader": []
    },
    {
      "apiKeyQuery": []
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/releases/": {
      "post": {
        "description": "Serves to create a Container together with its PickupRight that gets automatically transferred to the consignee.",
        "summary": "Create release",
        "tags": [
          "Releases"
        ],
        "operationId": "Create release",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreateReleaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "default": {
            "description": "",
            "schema": {}
          }
        },
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/api/v1/releases/",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "{  \"originalId\": 123,  \"isoNumber\": \"MSCU2586915\",  \"blNumber\": \"BL934655\",  \"containerType\": \"20GP\",  \"loadStatus\": \"full\",  \"grossWeight\": 1000,  \"seals\": \"EMCCAC3955\",  \"portOfLoading\": \"CNSGP\",  \"portOfDestination\": \"BEANR\",  \"placeOfDischarge\": \"MPET K730\",  \"containerOwner\": \"MSC\",  \"consignee\": \"BDP\",  \"validFrom\": \"2017-01-06T14:00:00Z\",  \"validUntil\": \"2017-01-26T12:00:00Z\"}"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Create release1",
            "x-testDescription": "Serves to create a Container together with its PickupRight that gets transferred to the consignee."
          },
          {
            "request": {
              "method": "POST",
              "uri": "/api/v1/releases/",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "{  \"originalId\": 123,  \"isoNumber\": \"MSCU2586915\",  \"blNumber\": \"BL934655\",  \"containerType\": \"20GP\",  \"loadStatus\": \"full\",  \"grossWeight\": 1000,  \"seals\": \"EMCCAC3955\",  \"portOfLoading\": \"CNSGP\",  \"portOfDestination\": \"BEANR\",  \"placeOfDischarge\": \"MPET K730\",  \"containerOwner\": \"MSC\",  \"consignee\": \"BDP\",  \"validFrom\": \"2017-01-06T14:00:00Z\",  \"validUntil\": \"2017-01-26T12:00:00Z\"}"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Create release2",
            "x-testDescription": "Serves to create a Container together with its PickupRight that gets transferred to the consignee."
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/releases/{id}": {
      "delete": {
        "description": "Blocking a release is done by a delete. This will revoke the PickupRight from the consignee. The Container and its PickupRight are deleted. Afterwards it is still possible to release again.\n The following conditions apply for this to work:\n* the container must have been released, i.e. there must be a vallid PickupRight   for the Container\n* the PickupRight should not be transferred to another Organization than the one that got the relesase initially\n* the PickupRight should not yet be assigned (to a driver / skipper)",
        "summary": "Block",
        "tags": [
          "Releases"
        ],
        "operationId": "Block",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "format": "double",
            "description": "original id of the release as defined in the client system and passed during the creation."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "default": {
            "description": "",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/containers": {
      "get": {
        "description": "Get all containers currently in the database. Only Containers accessible by the user will be reported.",
        "summary": "List Containers",
        "tags": [
          "Containers"
        ],
        "operationId": "List Containers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ListContainersResponse"
              }
            },
            "examples": {
              "application/json": [
                {
                  "id": 123,
                  "isoNumber": "MSCU1234560",
                  "blNumber": "BL934655",
                  "containerType": "20GP",
                  "loadStatus": "full",
                  "grossWeight": "1000",
                  "seals": "EMCCAC3955",
                  "portOfLoading": "CNSGP",
                  "portOfDestination": "BEANR",
                  "placeOfDischargeId": 5,
                  "containerOwnerId": 100
                }
              ]
            }
          }
        },
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/api/v1/containers"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "RAW",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "[    {        \"id\": 123,        \"isoNumber\": \"MSCU1234560\",        \"blNumber\": \"BL934655\",        \"containerType\": \"20GP\",        \"loadStatus\": \"full\",        \"grossWeight\": \"1000\",        \"seals\": \"EMCCAC3955\",        \"portOfLoading\": \"CNSGP\",        \"portOfDestination\": \"BEANR\",        \"placeOfDischargeId\": 5,        \"containerOwnerId\": 100    }]"
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "List Containers1",
            "x-testDescription": "Get all containers currently in the database. Only Containers accessible by the\nuser will be reported."
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Create a new container.\nIf all goes well, a 200 status code is returned.\nIf the create fails, a 500 status code is returned.",
        "summary": "Create a new Container",
        "tags": [
          "Containers"
        ],
        "operationId": "Create a new Container",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreateANewContainerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "default": {
            "description": "",
            "schema": {}
          }
        },
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/api/v1/containers",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "{  \"isoNumber\": \"MSCU2586915\",  \"blNumber\": \"BL934655\",  \"containerType\": \"20GP\",  \"loadStatus\": \"full\",  \"grossWeight\": 1000,  \"seals\": \"EMCCAC3955\",  \"portOfLoading\": \"CNSGP\",  \"portOfDestination\": \"BEANR\",  \"placeOfDischargeId\": 5,  \"containerOwnerId\": 100}"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Create a new Container1",
            "x-testDescription": "Create a new container.\nIf all goes well, a 200 status code is returned.\nIf the create fails, a 500 status code is returned."
          },
          {
            "request": {
              "method": "POST",
              "uri": "/api/v1/containers",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "{  \"isoNumber\": \"MSCU2586915\",  \"blNumber\": \"BL934655\",  \"containerType\": \"20GP\",  \"loadStatus\": \"full\",  \"grossWeight\": 1000,  \"seals\": \"EMCCAC3955\",  \"portOfLoading\": \"CNSGP\",  \"portOfDestination\": \"BEANR\",  \"placeOfDischargeId\": 5,  \"containerOwnerId\": 100}"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Create a new Container2",
            "x-testDescription": "Create a new container.\nIf all goes well, a 200 status code is returned.\nIf the create fails, a 500 status code is returned."
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/containers/{id}/events": {
      "get": {
        "description": "Get the list of Events related to a container",
        "summary": "Get container events",
        "tags": [
          "Containers"
        ],
        "operationId": "Get container events",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "format": "double",
            "description": "id of the Container"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetContainerEventsResponse"
              }
            },
            "examples": {
              "application/json": [
                {
                  "id": 123,
                  "type": "pickup",
                  "containerId": 1,
                  "locationId": 50,
                  "time": "2017-06-21T16:00:00Z"
                }
              ]
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/containers/{id}/release": {
      "put": {
        "description": "Release a container to an organization.",
        "summary": "Release",
        "tags": [
          "Containers"
        ],
        "operationId": "Release",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "format": "double",
            "description": "id of the Container"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ReleaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "default": {
            "description": "",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/pickup_rights/": {
      "get": {
        "description": "Get all PickupRights that are assigned / transferred to the users's Organization.",
        "summary": "List PickupRights",
        "tags": [
          "PickupRights"
        ],
        "operationId": "List PickupRights",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ListPickuprightsResponse"
              }
            },
            "examples": {
              "application/json": [
                {
                  "id": 456,
                  "containerId": 123,
                  "transferrerId": 12,
                  "pickupLocationId": 1,
                  "createdAt": "2017-01-06T10:00:00Z",
                  "validFrom": "2017-01-06T14:00:00Z",
                  "validUntil": "2017-01-26T12:00:00Z",
                  "blocked": false,
                  "available": true,
                  "transfereeId": 33,
                  "assigneeId": 4,
                  "pickedUp": false,
                  "delivered": false
                }
              ]
            }
          }
        },
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/api/v1/pickup_rights/"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "RAW",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "[  {    \"id\": 456,    \"containerId\": 123,    \"transferrerId\": 12,    \"pickupLocationId\": 1,    \"createdAt\": \"2017-01-06T10:00:00Z\",    \"validFrom\": \"2017-01-06T14:00:00Z\",    \"validUntil\": \"2017-01-26T12:00:00Z\",    \"blocked\": false,    \"available\": true,    \"transfereeId\": 33,    \"assigneeId\": 4,    \"pickedUp\": false,    \"delivered\": false  }]"
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "List PickupRights1",
            "x-testDescription": "Get all PickupRights that are assigned / transferred to the users's\nOrganization."
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/pickup_rights/{id}/request": {
      "get": {
        "description": "When a driver needs to pickup a container, he should send a request to get\nauthorization for the pickup. This will return a **temporary pincode**.\nIf no authorization is given, http status 403 is returned",
        "summary": "Request",
        "tags": [
          "PickupRights"
        ],
        "operationId": "Request",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "format": "double",
            "description": "id of the PickupRight"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RequestResponse"
            },
            "examples": {
              "application/json": {
                "temporaryPincode": "9786",
                "temporaryPincodeValidUntil": "2017-01-26T09:10:00Z"
              }
            }
          },
          "403": {
            "description": "",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/pickup_rights/{id}/transfer": {
      "put": {
        "description": "Transfer the PickupRight to another Organization (a subcontractor).",
        "summary": "Transfer",
        "tags": [
          "PickupRights"
        ],
        "operationId": "Transfer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "format": "double",
            "description": "id of the PickupRight (as reported by List PickupRights)"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/TransferRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "default": {
            "description": "",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/pickup_rights/{id}/assign": {
      "put": {
        "description": "Assign the PickupRight to a truck driver.",
        "summary": "Assign",
        "tags": [
          "PickupRights"
        ],
        "operationId": "Assign",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "format": "double",
            "description": "id of the PickupRight as reported by List PickupRights"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/AssignRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "default": {
            "description": "",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/pickup_rights/{id}/revoke_assignment": {
      "put": {
        "description": "Revoke the current PickupRight assignment. This must be used in case you did an assign of a PickupRight to a driver and you want to cancel this. This action is only possible as long as the PickupRight is not exercised.",
        "summary": "Revoke Assignment",
        "tags": [
          "PickupRights"
        ],
        "operationId": "Revoke Assignment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "format": "double",
            "description": "id of the PickupRight as reported by List PickupRights"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "default": {
            "description": "",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/pickup_rights/{id}/revoke_transfer": {
      "put": {
        "description": "Revoke the current PickupRight transfer. This must be used in case you did a transfer of a PickupRight to another Organization and you want to cancel this. This action is only possible as long as the PickupRight is not assigned.",
        "summary": "Revoke Transfer",
        "tags": [
          "PickupRights"
        ],
        "operationId": "Revoke Transfer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "format": "double",
            "description": "id of the PickupRight as reported by List PickupRights"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "default": {
            "description": "",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/pickups": {
      "post": {
        "description": "When the driver has picked up the container, a request should be sent to the server to record (create) the pickup. The server will record the datetime of the pickup.",
        "summary": "Create pickup",
        "tags": [
          "Pickups"
        ],
        "operationId": "Create pickup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreatePickupResponse"
            },
            "examples": {
              "application/json": {
                "pickupRightId": 456,
                "occurredAt": "2017-01-26T12:00:00Z"
              }
            }
          },
          "default": {
            "description": "",
            "schema": {}
          }
        },
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/api/v1/pickups"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "RAW",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "{  \"pickupRightId\": 456,  \"occurredAt\": \"2017-01-26T12:00:00Z\"}"
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Create pickup1",
            "x-testDescription": "When the driver has picked up the container, a request should be sent to the\nserver to record (create) the pickup. The server will record the datetime of\nthe pickup.\nReturns 200 on success, 500 on failure."
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/deliveries": {
      "post": {
        "description": "When the driver has delivered the container, a request should be sent to the server to record (create) the delivery. Note that a delivery is associated with a PickupRight, because the driver who gets a PickupRight, will automatically get a right to deliver the container. For that reason, the PickupRight must be reported.",
        "summary": "Record delivery",
        "tags": [
          "Deliveries"
        ],
        "operationId": "Record delivery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RecordDeliveryResponse"
            },
            "examples": {
              "application/json": {
                "pickupRightId": 456,
                "occurredAt": "2017-01-26T14:00:00Z"
              }
            }
          },
          "default": {
            "description": "",
            "schema": {}
          }
        },
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/api/v1/deliveries"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "RAW",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "{  \"pickupRightId\": 456,  \"occurredAt\": \"2017-01-26T14:00:00Z\"}"
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Record delivery1",
            "x-testDescription": "When the driver has delivered the container, a request should be sent to the\nserver to record (create) the delivery.\nNote that a delivery is associated with a PickupRight, because the driver who\ngets a PickupRight, will automatically get a right to deliver the container.\nFor that reason, the PickupRight must be reported."
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/coordinates/": {
      "get": {
        "description": "Get the coordinates of the location with the given name and type.",
        "summary": "Get Coordinates",
        "tags": [
          "Coordinates"
        ],
        "operationId": "Get Coordinates",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "name of the location"
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "type of the Location, can be 'Quay', 'Depot', 'Warehouse', 'InlandTerminal', 'Checkpoint'"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetCoordinatesResponse"
            },
            "examples": {
              "application/json": {
                "name": "1742",
                "type": "Quay",
                "latitude": 51.22921,
                "longitude": 4.40228
              }
            }
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details.",
            "schema": {}
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/coordinates": {
      "get": {
        "description": "Get the coordinates of all known locations.",
        "summary": "Get all coordinates",
        "tags": [
          "Coordinates"
        ],
        "operationId": "Get all coordinates",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetAllCoordinatesResponse"
              }
            },
            "examples": {
              "application/json": [
                {
                  "name": "1742",
                  "type": "Quay",
                  "latitude": 51.22921,
                  "longitude": 4.40228
                },
                {
                  "name": "730",
                  "type": "Quay",
                  "latitude": 51.24445,
                  "longitude": 4.40392
                }
              ]
            }
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details.",
            "schema": {}
          }
        },
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/api/v1/coordinates"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "RAW",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "[  {    \"name\": \"1742\",    \"type\": \"Quay\",    \"latitude\": 51.22921,    \"longitude\": 4.40228  },  {    \"name\": \"730\",    \"type\": \"Quay\",    \"latitude\": 51.24445,    \"longitude\": 4.40392  }]"
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Get all coordinates1",
            "x-testDescription": "Get the coordinates of all known locations.\nOn error, status 500 is returned, with a JSON object with property error."
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/locations": {
      "get": {
        "description": "List all Locations with their details. Locations have a type, name and the ISRS Locode.",
        "summary": "List",
        "tags": [
          "Coordinates"
        ],
        "operationId": "List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ListResponse"
              }
            },
            "examples": {
              "application/json": [
                {
                  "id": 1,
                  "locationType": "Quay",
                  "isrsLocode": "BEANR011170S913",
                  "name": "Noordzeeterminal 913",
                  "operatingOrganizationId": 100
                },
                {
                  "id": 2,
                  "locationType": "Quay",
                  "isrsLocode": "BEANR0172900730",
                  "name": "Delwaidedok 730",
                  "operatingOrganizationId": 200
                }
              ]
            }
          }
        },
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/api/v1/locations"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "RAW",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "[  {    \"id\": 1,    \"locationType\": \"Quay\",    \"isrsLocode\": \"BEANR011170S913\",    \"name\": \"Noordzeeterminal 913\",    \"operatingOrganizationId\": 100  },  {    \"id\": 2,    \"locationType\": \"Quay\",    \"isrsLocode\": \"BEANR0172900730\",    \"name\": \"Delwaidedok 730\",    \"operatingOrganizationId\": 200  }]"
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "List1",
            "x-testDescription": "List all Locations with their details."
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Create a new Location",
        "summary": "Create",
        "tags": [
          "Coordinates"
        ],
        "operationId": "Create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "default": {
            "description": "",
            "schema": {}
          }
        },
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/api/v1/locations",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "  {    \"locationType\": \"Quay\",    \"isrsLocode\": \"BEANR0172900730\",    \"name\": \"Delwaidedok 730\",    \"operatingOrganizationId\":100  }"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Create1",
            "x-testDescription": "Create a new Location"
          },
          {
            "request": {
              "method": "POST",
              "uri": "/api/v1/locations",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "  {    \"locationType\": \"Quay\",    \"isrsLocode\": \"BEANR0172900730\",    \"name\": \"Delwaidedok 730\",    \"operatingOrganizationId\":100  }"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Create2",
            "x-testDescription": "Create a new Location"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/locations/{id}": {
      "get": {
        "description": "Get details of 1 location.",
        "summary": "Details",
        "tags": [
          "Coordinates"
        ],
        "operationId": "Details",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "format": "double",
            "description": "id of the location"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DetailsResponse"
            },
            "examples": {
              "application/json": {
                "id": 1,
                "locationType": "Quay",
                "isrsLocode": "BEANR011170S913",
                "name": "Noordzeeterminal 913",
                "operatingOrganizationId": 100
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/container_types": {
      "get": {
        "description": "List all ContainerTypes",
        "summary": "List",
        "tags": [
          "ContainerTypes"
        ],
        "operationId": "List1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "text/plain": [
                "20GP",
                "20HR",
                "20PF",
                "20TD",
                "20TG",
                "20TN",
                "22BU",
                "22GP",
                "22HR",
                "22PC",
                "22PF"
              ]
            }
          }
        },
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/api/v1/container_types"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "RAW",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "[\"20GP\",\"20HR\",\"20PF\",\"20TD\",\"20TG\",\"20TN\",\"22BU\",\"22GP\",\"22HR\",\"22PC\",\"22PF\"]"
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "List1",
            "x-testDescription": "List all ContainerTypes"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/organizations": {
      "get": {
        "description": "List all registered organizations.",
        "summary": "List",
        "tags": [
          "Organizations"
        ],
        "operationId": "List2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ListResponse8"
              }
            },
            "examples": {
              "application/json": [
                {
                  "id": 1,
                  "name": "TMining"
                },
                {
                  "id": 2,
                  "name": "MSC"
                }
              ]
            }
          }
        },
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/api/v1/organizations"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "RAW",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "[  {    \"id\": 1,    \"name\": \"TMining\"  },  {    \"id\": 2,    \"name\": \"MSC\"  }]"
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "List1",
            "x-testDescription": "List all registered organizations."
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Register an Organization with a name. The name must be unique, so if one registers an Organization with a name that is already in use, an error will occur.",
        "summary": "Register organization",
        "tags": [
          "Organizations"
        ],
        "operationId": "Register organization",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/RegisterOrganizationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "default": {
            "description": "",
            "schema": {}
          }
        },
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/api/v1/organizations",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "  {    \"name\": \"MSC\"  }"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Register organization1",
            "x-testDescription": "Register an Organization with a name. The name must be unique, so if one registers an Organization with a name that is already in use, an error will occur."
          },
          {
            "request": {
              "method": "POST",
              "uri": "/api/v1/organizations",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "  {    \"name\": \"MSC\"  }"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Register organization2",
            "x-testDescription": "Register an Organization with a name. The name must be unique, so if one registers an Organization with a name that is already in use, an error will occur."
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "description": "List all users registered.",
        "summary": "List",
        "tags": [
          "Users"
        ],
        "operationId": "List3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ListResponse11"
              }
            },
            "examples": {
              "application/json": [
                {
                  "id": 1,
                  "userName": "pascal",
                  "firstName": "Pascal",
                  "surName": "Verlinden",
                  "email": "pascal@t-mining.be",
                  "organizationId": 100,
                  "type": "User",
                  "owner": "EA4BDB9173C6CA4C80B226F11DC4C02BE9EE4162"
                },
                {
                  "id": 2,
                  "userName": "filip",
                  "firstName": "Filip",
                  "surName": "Heremans",
                  "email": "filip.heremans@t-mining.be",
                  "organizationId": 100,
                  "type": "User",
                  "owner": "EA4BDB9173C6CA4C80B226F11DC4C02BE9EE4163"
                },
                {
                  "id": 3,
                  "userName": "nico",
                  "firstName": "Nico",
                  "surName": "Wauters",
                  "email": "nico.wauters@t-mining.be",
                  "organizationId": 100,
                  "type": "Driver",
                  "owner": "EA4BDB9173C6CA4C80B226F11DC4C02BE9EE4164"
                }
              ]
            }
          }
        },
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/api/v1/users"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "RAW",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "  [    {      \"id\": 1,      \"userName\": \"pascal\",      \"firstName\": \"Pascal\",      \"surName\": \"Verlinden\",      \"email\": \"pascal@t-mining.be\",      \"organizationId\": 100,      \"type\": \"User\",      \"owner\": \"EA4BDB9173C6CA4C80B226F11DC4C02BE9EE4162\"    },    {      \"id\": 2,      \"userName\": \"filip\",      \"firstName\": \"Filip\",      \"surName\": \"Heremans\",      \"email\": \"filip.heremans@t-mining.be\",      \"organizationId\": 100,      \"type\": \"User\",      \"owner\": \"EA4BDB9173C6CA4C80B226F11DC4C02BE9EE4163\"    },    {      \"id\": 3,      \"userName\": \"nico\",      \"firstName\": \"Nico\",      \"surName\": \"Wauters\",      \"email\": \"nico.wauters@t-mining.be\",      \"organizationId\": 100,      \"type\": \"Driver\",      \"owner\": \"EA4BDB9173C6CA4C80B226F11DC4C02BE9EE4164\"    }  ]"
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "List1",
            "x-testDescription": "List all users registered."
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Register information of a user. Note that the \"real\" (human) user should have\nan account on the blockchain (upfront). This account is represented by an address on the chain, which is based on the public key of the user. Registering therefore means defining user **properties** like a username, which can then be used to refer to users in a more human-friendly way then by using the account addresses. User registration should be done by the user who owns an account on the chain. As a result of registration, a User contract is created on the chain, which contains the user properties, and which is owned by the user account. From then on, one can use the username to refer to a user on the web/mobile app.",
        "summary": "Register user",
        "tags": [
          "Users"
        ],
        "operationId": "Register user",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/RegisterUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "default": {
            "description": "",
            "schema": {}
          }
        },
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/api/v1/users",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "  {    \"userName\": \"JohnD\",    \"firstName\": \"John\",    \"surName\": \"Doe\",    \"email\": \"john@doe.org\",    \"organizationId\": 100,    \"type\": \"Driver\"  }"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Register user1",
            "x-testDescription": "Register information of a user. Note that the \"real\" (human) user should have\nan account on the blockchain (upfront). This account is represented by an address on the chain, which is based on the public key of the user. Registering therefore means defining user **properties** like a username, which can then be used to refer to users in a more human-friendly way then by using the account addresses. User registration should be done by the user who owns an account on the chain. As a result of registration, a User contract is created on the chain, which contains the user properties, and which is owned by the user account. From then on, one can use the username to refer to a user on the web/mobile app."
          },
          {
            "request": {
              "method": "POST",
              "uri": "/api/v1/users",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "  {    \"userName\": \"JohnD\",    \"firstName\": \"John\",    \"surName\": \"Doe\",    \"email\": \"john@doe.org\",    \"organizationId\": 100,    \"type\": \"Driver\"  }"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Register user2",
            "x-testDescription": "Register information of a user. Note that the \"real\" (human) user should have\nan account on the blockchain (upfront). This account is represented by an address on the chain, which is based on the public key of the user. Registering therefore means defining user **properties** like a username, which can then be used to refer to users in a more human-friendly way then by using the account addresses. User registration should be done by the user who owns an account on the chain. As a result of registration, a User contract is created on the chain, which contains the user properties, and which is owned by the user account. From then on, one can use the username to refer to a user on the web/mobile app."
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/events/": {
      "post": {
        "description": "Used to create an event for a container at a specific location and time.\nEach event is defined by a type.\nCurrently a limited number of events (pickup and availability) are supported, but this may be extended with e.g. passage events.\nThere are 2 ways to refer to a Container: by means of its id as defined in the Blockchain (this requires recording these ids in your app), or by means of a combination of the blNumber and isoNumber. Similarly, locations can be specified in 2 ways: by means of their id as defined in the Blockchain or by means of their name. In the latter case the name must be defined in a mapping   file for the Organization you - as a user- belong to. Also note that the container may not yet be known in the Blockchain at the time\nan availability event is created!\n",
        "summary": "Create an Event",
        "tags": [
          "Events"
        ],
        "operationId": "Create an Event",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreateAnEventRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "default": {
            "description": "",
            "schema": {}
          }
        },
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/api/v1/events/",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "{  \"type\": \"pickup\",  \"containerId\": 1,  \"isoNumber\": \"MSCU2586915\",  \"blNumber\": \"BL934655\",  \"locationId\": 20,  \"location\": \"MPET K730\",  \"pickupRightId\": 12}"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Create an Event1",
            "x-testDescription": "Used to create an event for a container at a specific location and time.\nEach event is defined by a type.\nCurrently a limited number of events (pickup and availability) are supported, but this may be extended with e.g. passage events.\nThere are 2 ways to refer to a Container: by means of its id as defined in the Blockchain (this requires recording these ids in your app), or by means of a combination of the blNumber and isoNumber. Similarly, locations can be specified in 2 ways: by means of their id as defined in the Blockchain or by means of their name. In the latter case the name must be defined in a mapping   file for the Organization you - as a user- belong to. Also note that the container may not yet be known in the Blockchain at the time\nan availability event is created!\n"
          },
          {
            "request": {
              "method": "POST",
              "uri": "/api/v1/events/",
              "headers": {
                "Content-Type": "application/json"
              },
              "body": "{  \"type\": \"pickup\",  \"containerId\": 1,  \"isoNumber\": \"MSCU2586915\",  \"blNumber\": \"BL934655\",  \"locationId\": 20,  \"location\": \"MPET K730\",  \"pickupRightId\": 12}"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "Create an Event2",
            "x-testDescription": "Used to create an event for a container at a specific location and time.\nEach event is defined by a type.\nCurrently a limited number of events (pickup and availability) are supported, but this may be extended with e.g. passage events.\nThere are 2 ways to refer to a Container: by means of its id as defined in the Blockchain (this requires recording these ids in your app), or by means of a combination of the blNumber and isoNumber. Similarly, locations can be specified in 2 ways: by means of their id as defined in the Blockchain or by means of their name. In the latter case the name must be defined in a mapping   file for the Organization you - as a user- belong to. Also note that the container may not yet be known in the Blockchain at the time\nan availability event is created!\n"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/v1/ping": {
      "get": {
        "description": "Ping",
        "summary": "Ping this webservice to check the availability of the API. Will return http-code 200 when available and a time-out if not.",
        "tags": [
          "Status"
        ],
        "operationId": "Ping",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "authentication token of user making the request"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    }
  },
  "definitions": {
    "GetCoordinatesResponse": {
      "title": "Get Coordinates response",
      "example": {
        "name": "1742",
        "type": "Quay",
        "latitude": 51.22921,
        "longitude": 4.40228
      },
      "type": "object",
      "properties": {
        "name": {
          "description": "",
          "type": "string"
        },
        "type": {
          "description": "",
          "type": "string"
        },
        "latitude": {
          "description": "",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "description": "",
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "name",
        "type",
        "latitude",
        "longitude"
      ]
    },
    "GetAllCoordinatesResponse": {
      "title": "Get all coordinates response",
      "example": [
        {
          "name": "1742",
          "type": "Quay",
          "latitude": 51.22921,
          "longitude": 4.40228
        },
        {
          "name": "730",
          "type": "Quay",
          "latitude": 51.24445,
          "longitude": 4.40392
        }
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "",
          "type": "string"
        },
        "type": {
          "description": "",
          "type": "string"
        },
        "latitude": {
          "description": "",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "description": "",
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "name",
        "type",
        "latitude",
        "longitude"
      ]
    },
    "ListResponse": {
      "title": "List response",
      "example": [
        {
          "id": 1,
          "locationType": "Quay",
          "isrsLocode": "BEANR011170S913",
          "name": "Noordzeeterminal 913",
          "operatingOrganizationId": 100
        },
        {
          "id": 2,
          "locationType": "Quay",
          "isrsLocode": "BEANR0172900730",
          "name": "Delwaidedok 730",
          "operatingOrganizationId": 200
        }
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "locationType": {
          "description": "",
          "type": "string"
        },
        "isrsLocode": {
          "description": "",
          "type": "string"
        },
        "name": {
          "description": "",
          "type": "string"
        },
        "operatingOrganizationId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "id",
        "locationType",
        "isrsLocode",
        "name",
        "operatingOrganizationId"
      ]
    },
    "CreateRequest": {
      "title": "Create request",
      "example": {
        "locationType": "Quay",
        "isrsLocode": "BEANR0172900730",
        "name": "Delwaidedok 730",
        "operatingOrganizationId": 100
      },
      "type": "object",
      "properties": {
        "locationType": {
          "description": "",
          "type": "string"
        },
        "isrsLocode": {
          "description": "",
          "type": "string"
        },
        "name": {
          "description": "",
          "type": "string"
        },
        "operatingOrganizationId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "locationType",
        "isrsLocode",
        "name",
        "operatingOrganizationId"
      ]
    },
    "DetailsResponse": {
      "title": "Details response",
      "example": {
        "id": 1,
        "locationType": "Quay",
        "isrsLocode": "BEANR011170S913",
        "name": "Noordzeeterminal 913",
        "operatingOrganizationId": 100
      },
      "type": "object",
      "properties": {
        "id": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "locationType": {
          "description": "",
          "type": "string"
        },
        "isrsLocode": {
          "description": "",
          "type": "string"
        },
        "name": {
          "description": "",
          "type": "string"
        },
        "operatingOrganizationId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "id",
        "locationType",
        "isrsLocode",
        "name",
        "operatingOrganizationId"
      ]
    },
    "RegisterOrganizationRequest": {
      "title": "Register organization request",
      "example": {
        "name": "MSC"
      },
      "type": "object",
      "properties": {
        "name": {
          "description": "",
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "ListResponse8": {
      "title": "List response8",
      "example": [
        {
          "id": 1,
          "name": "TMining"
        },
        {
          "id": 2,
          "name": "MSC"
        }
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "RegisterUserRequest": {
      "title": "Register user request",
      "example": {
        "userName": "JohnD",
        "firstName": "John",
        "surName": "Doe",
        "email": "john@doe.org",
        "organizationId": 100,
        "type": "Driver"
      },
      "type": "object",
      "properties": {
        "userName": {
          "description": "",
          "type": "string"
        },
        "firstName": {
          "description": "",
          "type": "string"
        },
        "surName": {
          "description": "",
          "type": "string"
        },
        "email": {
          "description": "",
          "type": "string"
        },
        "organizationId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "description": "",
          "type": "string"
        }
      },
      "required": [
        "userName",
        "firstName",
        "surName",
        "email",
        "organizationId",
        "type"
      ]
    },
    "ListResponse11": {
      "title": "List response11",
      "example": [
        {
          "id": 1,
          "userName": "pascal",
          "firstName": "Pascal",
          "surName": "Verlinden",
          "email": "pascal@t-mining.be",
          "organizationId": 100,
          "type": "User",
          "owner": "EA4BDB9173C6CA4C80B226F11DC4C02BE9EE4162"
        },
        {
          "id": 2,
          "userName": "filip",
          "firstName": "Filip",
          "surName": "Heremans",
          "email": "filip.heremans@t-mining.be",
          "organizationId": 100,
          "type": "User",
          "owner": "EA4BDB9173C6CA4C80B226F11DC4C02BE9EE4163"
        },
        {
          "id": 3,
          "userName": "nico",
          "firstName": "Nico",
          "surName": "Wauters",
          "email": "nico.wauters@t-mining.be",
          "organizationId": 100,
          "type": "Driver",
          "owner": "EA4BDB9173C6CA4C80B226F11DC4C02BE9EE4164"
        }
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "description": "",
          "type": "string"
        },
        "firstName": {
          "description": "",
          "type": "string"
        },
        "surName": {
          "description": "",
          "type": "string"
        },
        "email": {
          "description": "",
          "type": "string"
        },
        "organizationId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "description": "",
          "type": "string"
        },
        "owner": {
          "description": "",
          "type": "string"
        }
      },
      "required": [
        "id",
        "userName",
        "firstName",
        "surName",
        "email",
        "organizationId",
        "type",
        "owner"
      ]
    },
    "CreateAnEventRequest": {
      "title": "Create an Event request",
      "example": {
        "type": "pickup",
        "containerId": 1,
        "isoNumber": "MSCU2586915",
        "blNumber": "BL934655",
        "locationId": 20,
        "location": "MPET K730",
        "pickupRightId": 12
      },
      "type": "object",
      "properties": {
        "type": {
          "description": "",
          "type": "string"
        },
        "containerId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "isoNumber": {
          "description": "",
          "type": "string"
        },
        "blNumber": {
          "description": "",
          "type": "string"
        },
        "locationId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "location": {
          "description": "",
          "type": "string"
        },
        "pickupRightId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "type",
        "containerId",
        "isoNumber",
        "blNumber",
        "locationId",
        "location",
        "pickupRightId"
      ]
    },
    "CreateReleaseRequest": {
      "title": "Create release request",
      "example": {
        "originalId": 123,
        "isoNumber": "MSCU2586915",
        "blNumber": "BL934655",
        "containerType": "20GP",
        "loadStatus": "full",
        "grossWeight": 1000,
        "seals": "EMCCAC3955",
        "portOfLoading": "CNSGP",
        "portOfDestination": "BEANR",
        "placeOfDischarge": "MPET K730",
        "containerOwner": "MSC",
        "consignee": "BDP",
        "validFrom": "2017-01-06T14:00:00Z",
        "validUntil": "2017-01-26T12:00:00Z"
      },
      "type": "object",
      "properties": {
        "originalId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "isoNumber": {
          "description": "",
          "type": "string"
        },
        "blNumber": {
          "description": "",
          "type": "string"
        },
        "containerType": {
          "description": "",
          "type": "string"
        },
        "loadStatus": {
          "description": "",
          "type": "string"
        },
        "grossWeight": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "seals": {
          "description": "",
          "type": "string"
        },
        "portOfLoading": {
          "description": "",
          "type": "string"
        },
        "portOfDestination": {
          "description": "",
          "type": "string"
        },
        "placeOfDischarge": {
          "description": "",
          "type": "string"
        },
        "containerOwner": {
          "description": "",
          "type": "string"
        },
        "consignee": {
          "description": "",
          "type": "string"
        },
        "validFrom": {
          "description": "",
          "type": "string"
        },
        "validUntil": {
          "description": "",
          "type": "string"
        }
      },
      "required": [
        "originalId",
        "isoNumber",
        "blNumber",
        "containerType",
        "loadStatus",
        "grossWeight",
        "seals",
        "portOfLoading",
        "portOfDestination",
        "placeOfDischarge",
        "containerOwner",
        "consignee",
        "validFrom",
        "validUntil"
      ]
    },
    "GetContainerEventsResponse": {
      "title": "Get container events response",
      "example": [
        {
          "id": 123,
          "type": "pickup",
          "containerId": 1,
          "locationId": 50,
          "time": "2017-06-21T16:00:00Z"
        }
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "description": "",
          "type": "string"
        },
        "containerId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "locationId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "time": {
          "description": "",
          "type": "string"
        }
      },
      "required": [
        "id",
        "type",
        "containerId",
        "locationId",
        "time"
      ]
    },
    "ReleaseRequest": {
      "title": "Release request",
      "type": "object",
      "properties": {
        "organizationId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "validFrom": {
          "description": "",
          "type": "string"
        },
        "validUntil": {
          "description": "",
          "type": "string"
        }
      },
      "required": [
        "organizationId",
        "validFrom",
        "validUntil"
      ]
    },
    "CreateANewContainerRequest": {
      "title": "Create a new Container request",
      "example": {
        "isoNumber": "MSCU2586915",
        "blNumber": "BL934655",
        "containerType": "20GP",
        "loadStatus": "full",
        "grossWeight": 1000,
        "seals": "EMCCAC3955",
        "portOfLoading": "CNSGP",
        "portOfDestination": "BEANR",
        "placeOfDischargeId": 5,
        "containerOwnerId": 100
      },
      "type": "object",
      "properties": {
        "isoNumber": {
          "description": "",
          "type": "string"
        },
        "blNumber": {
          "description": "",
          "type": "string"
        },
        "containerType": {
          "description": "",
          "type": "string"
        },
        "loadStatus": {
          "description": "",
          "type": "string"
        },
        "grossWeight": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "seals": {
          "description": "",
          "type": "string"
        },
        "portOfLoading": {
          "description": "",
          "type": "string"
        },
        "portOfDestination": {
          "description": "",
          "type": "string"
        },
        "placeOfDischargeId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "containerOwnerId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "isoNumber",
        "blNumber",
        "containerType",
        "loadStatus",
        "grossWeight",
        "seals",
        "portOfLoading",
        "portOfDestination",
        "placeOfDischargeId",
        "containerOwnerId"
      ]
    },
    "ListContainersResponse": {
      "title": "List Containers response",
      "example": [
        {
          "id": 123,
          "isoNumber": "MSCU1234560",
          "blNumber": "BL934655",
          "containerType": "20GP",
          "loadStatus": "full",
          "grossWeight": "1000",
          "seals": "EMCCAC3955",
          "portOfLoading": "CNSGP",
          "portOfDestination": "BEANR",
          "placeOfDischargeId": 5,
          "containerOwnerId": 100
        }
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "isoNumber": {
          "description": "",
          "type": "string"
        },
        "blNumber": {
          "description": "",
          "type": "string"
        },
        "containerType": {
          "description": "",
          "type": "string"
        },
        "loadStatus": {
          "description": "",
          "type": "string"
        },
        "grossWeight": {
          "description": "",
          "type": "string"
        },
        "seals": {
          "description": "",
          "type": "string"
        },
        "portOfLoading": {
          "description": "",
          "type": "string"
        },
        "portOfDestination": {
          "description": "",
          "type": "string"
        },
        "placeOfDischargeId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "containerOwnerId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "id",
        "isoNumber",
        "blNumber",
        "containerType",
        "loadStatus",
        "grossWeight",
        "seals",
        "portOfLoading",
        "portOfDestination",
        "placeOfDischargeId",
        "containerOwnerId"
      ]
    },
    "RequestResponse": {
      "title": "Request response",
      "example": {
        "temporaryPincode": "9786",
        "temporaryPincodeValidUntil": "2017-01-26T09:10:00Z"
      },
      "type": "object",
      "properties": {
        "temporaryPincode": {
          "description": "",
          "type": "string"
        },
        "temporaryPincodeValidUntil": {
          "description": "",
          "type": "string"
        }
      },
      "required": [
        "temporaryPincode",
        "temporaryPincodeValidUntil"
      ]
    },
    "TransferRequest": {
      "title": "Transfer request",
      "type": "object",
      "properties": {
        "transfereeId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "transfereeId"
      ]
    },
    "AssignRequest": {
      "title": "Assign request",
      "type": "object",
      "properties": {
        "assigneeId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "assigneeId"
      ]
    },
    "ListPickuprightsResponse": {
      "title": "List PickupRights response",
      "example": [
        {
          "id": 456,
          "containerId": 123,
          "transferrerId": 12,
          "pickupLocationId": 1,
          "createdAt": "2017-01-06T10:00:00Z",
          "validFrom": "2017-01-06T14:00:00Z",
          "validUntil": "2017-01-26T12:00:00Z",
          "blocked": false,
          "available": true,
          "transfereeId": 33,
          "assigneeId": 4,
          "pickedUp": false,
          "delivered": false
        }
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "containerId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "transferrerId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "pickupLocationId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "createdAt": {
          "description": "",
          "type": "string"
        },
        "validFrom": {
          "description": "",
          "type": "string"
        },
        "validUntil": {
          "description": "",
          "type": "string"
        },
        "blocked": {
          "description": "",
          "type": "boolean"
        },
        "available": {
          "description": "",
          "type": "boolean"
        },
        "transfereeId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "assigneeId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "pickedUp": {
          "description": "",
          "type": "boolean"
        },
        "delivered": {
          "description": "",
          "type": "boolean"
        }
      },
      "required": [
        "id",
        "containerId",
        "transferrerId",
        "pickupLocationId",
        "createdAt",
        "validFrom",
        "validUntil",
        "blocked",
        "available",
        "transfereeId",
        "assigneeId",
        "pickedUp",
        "delivered"
      ]
    },
    "CreatePickupResponse": {
      "title": "Create pickup response",
      "example": {
        "pickupRightId": 456,
        "occurredAt": "2017-01-26T12:00:00Z"
      },
      "type": "object",
      "properties": {
        "pickupRightId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "occurredAt": {
          "description": "",
          "type": "string"
        }
      },
      "required": [
        "pickupRightId",
        "occurredAt"
      ]
    },
    "RecordDeliveryResponse": {
      "title": "Record delivery response",
      "example": {
        "pickupRightId": 456,
        "occurredAt": "2017-01-26T14:00:00Z"
      },
      "type": "object",
      "properties": {
        "pickupRightId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "occurredAt": {
          "description": "",
          "type": "string"
        }
      },
      "required": [
        "pickupRightId",
        "occurredAt"
      ]
    }
  }
}